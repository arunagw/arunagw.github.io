<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Arun Agrawal's Blog]]></title>
  <link href="http://arunagw.github.io/atom.xml" rel="self"/>
  <link href="http://arunagw.github.io/"/>
  <updated>2015-05-07T22:20:35+02:00</updated>
  <id>http://arunagw.github.io/</id>
  <author>
    <name><![CDATA[Arun Agrawal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interview on RubyIndia Podcast]]></title>
    <link href="http://arunagw.github.io/2015/interview-on-rubyindia-podcast/"/>
    <updated>2015-03-17T09:21:50+01:00</updated>
    <id>http://arunagw.github.io/2015/interview-on-rubyindia-podcast</id>
    <content type="html"><![CDATA[<p>Recently I had an interview on <a href="http://podcast.rubyindia.org/rubyindia/10">RubyIndia Podcast</a> and we talked about my early experiences with Ruby, starting my contributions to <a href="https://github.com/arunagw/">Open Source Projects</a> and currently <a href="https://github.com/rails/rails">Ruby on Rails</a>, work and culture at <a href="http://playbook.thoughtbot.com/">thoughtbot</a>.</p>

<p>If you are interested in listening to me make sure to check this out.</p>

<p><a href="http://podcast.rubyindia.org/rubyindia/10">http://podcast.rubyindia.org/rubyindia/10</a></p>

<p>This event was recorded on Hangout on Air and raw version is available here.</p>

<p><a href="https://www.youtube.com/watch?v=Hgm1SlEdKG8">https://www.youtube.com/watch?v=Hgm1SlEdKG8</a></p>

<p>I would like to give credits for few people about this</p>

<ul>
<li><a href="https://twitter.com/vipulnsward">@vipulnsward</a> ( For the interview )</li>
<li><a href="https://twitter.com/_cha1tanya">@_cha1tanya</a> ( For Running RubyIndia podcast with Vipul)</li>
<li><a href="https://twitter.com/raysrashmi">@raysrashmi</a> ( For encouraging me about this interview)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4 app on heroku]]></title>
    <link href="http://arunagw.github.io/2013/rails4-app-on-heroku/"/>
    <updated>2013-06-15T21:43:00+02:00</updated>
    <id>http://arunagw.github.io/2013/rails4-app-on-heroku</id>
    <content type="html"><![CDATA[<p>Updated : <a href="https://blog.heroku.com/archives/2013/6/17/ruby-2-default-new-aps">Heroku</a> has updated to use ruby2.0. by default.</p>

<p>If you are deploying a new rails4 app on heroku that might fail. And you will get following error.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>----&gt; Ruby/Rails app detected
</span><span class='line'>-----&gt; Installing dependencies using Bundler version 1.3.2
</span><span class='line'>       Running: bundle install --without development:test --path vendor/bundle --binstubs vendor/bundle/bin --deployment
</span><span class='line'>       Fetching gem metadata from https://rubygems.org/..........
</span><span class='line'>       Fetching gem metadata from https://rubygems.org/..
</span><span class='line'>       Installing rake (10.0.4)
</span><span class='line'>       Installing i18n (0.6.4)
</span><span class='line'>       Installing minitest (4.7.4)
</span><span class='line'>       Installing multi_json (1.7.7)
</span><span class='line'>       Installing atomic (1.1.9)
</span><span class='line'>       Installing thread_safe (0.1.0)
</span><span class='line'>       Installing tzinfo (0.3.37)
</span><span class='line'>       Installing activesupport (4.0.0.rc1)
</span><span class='line'>       Gem::InstallError: activesupport requires Ruby version &gt;= 1.9.3.
</span><span class='line'>       An error occurred while installing activesupport (4.0.0.rc1), and Bundler cannot
</span><span class='line'>       continue.
</span><span class='line'>       Make sure that `gem install activesupport -v '4.0.0.rc1'` succeeds before
</span><span class='line'>       bundling.
</span><span class='line'> !
</span><span class='line'> !     Failed to install gems via Bundler.
</span><span class='line'> !
</span><span class='line'>
</span><span class='line'> !     Push rejected, failed to compile Ruby/Rails app</span></code></pre></td></tr></table></div></figure>


<p>In short, it says</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Gem::InstallError: activesupport requires Ruby version &gt;= 1.9.3.</span></code></pre></td></tr></table></div></figure>


<p>Problem is that heroku uses ruby 1.9.2 by default</p>

<p>To check this run this command from your app</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku run ruby -v</span></code></pre></td></tr></table></div></figure>


<p>The output will be</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby 1.9.2p290 (2011-07-09 revision 32553) [x86_64-linux]</span></code></pre></td></tr></table></div></figure>


<p>Solution is simple, we need to attach ruby-version with app to tell heroku to use ruby 1.9.3 or higher because rails4 works with ruby-1.9.3 or higher.</p>

<p>Now add this following in your app Gemfile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby '1.9.3'</span></code></pre></td></tr></table></div></figure>


<p>This will force heroku to use your desired ruby. Here we are using 1.9.3</p>

<p>This solution will work for your rails4 versions(4.0.0.beta1, 4.0.0.rc1, 4.0.0.rc2) apps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switched to Heroku and Octopress]]></title>
    <link href="http://arunagw.github.io/2013/switched-to-heroku-and-octopress/"/>
    <updated>2013-05-27T23:05:00+02:00</updated>
    <id>http://arunagw.github.io/2013/switched-to-heroku-and-octopress</id>
    <content type="html"><![CDATA[<p>I started posting blogs using self hosted <a href="http://wordpress.org/">Wordpress</a> solution. After few years I realize that I should use Ruby/Rack framework. And drop this old way of doing blog post.</p>

<p>I tried moving away from Wordpress few times and one day got success. Finally I converted my all blog posts into markdown format.</p>

<p>Now it&rsquo;s very easy to choose a Ruby/Rack based framework as posts are already in markdown.</p>

<p>After that I bought a theme from bootstrap and applied that, but I was still using my hosted solution with <a href="http://middlemanapp.com/">middleman</a> generated site.</p>

<p>I survived with this for a long time. Problem was for every blog post I have to deploy site using git pull every time by logging into server.</p>

<p>At last I found octopress and a Heroku combination.</p>

<p>And here is my blog! Using <a href="http://octopress.org/">Octopress</a> and <a href="http://octopress.org/">Heroku</a> and I love it. Simple and easy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slides (When Ruby Meets Java - The Power of Torquebox)]]></title>
    <link href="http://arunagw.github.io/2012/slides-when-ruby-meets-java-the-power-of-torquebox/"/>
    <updated>2012-04-01T00:00:00+02:00</updated>
    <id>http://arunagw.github.io/2012/slides-when-ruby-meets-java-the-power-of-torquebox</id>
    <content type="html"><![CDATA[<div class="entry">

  <p>
    Posting slides from RubyConfIndia talk about <a href="http://torquebox.org/">Torquebox</a>
  </p>

  <script async class="speakerdeck-embed" data-id="4f8552204976b80022018582" data-ratio="1.299492385786802" src="//speakerdeck.com/assets/embed.js"></script>

  <p>&nbsp;</p>

  <p>Cheers,</p>

  <p>Arun</p>

  <p><a href="http://twitter.com/arunagw">@arunagw</a></p>


</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth with OmniAuth and Twitter]]></title>
    <link href="http://arunagw.github.io/2011/oauth-omniauth-twitter/"/>
    <updated>2011-11-07T00:00:00+01:00</updated>
    <id>http://arunagw.github.io/2011/oauth-omniauth-twitter</id>
    <content type="html"><![CDATA[Hi Folks,

If you want to have OAuth in your Rails Application with twitter. <a href="https://github.com/intridea/omniauth">OmniAuth</a> is the best gem to use.

OmniAuth provides list of  Strategies to use many OAuth for your application. Here is the<a href="https://github.com/intridea/omniauth/wiki/List-of-Strategies"> List of Strategies</a>.

Showing here a <a href="https://github.com/arunagw/omniauth-twitter">Twitter Strategy</a> for OmniAuth. Twitter uses the OAuth 1.0a flow, you can read about it here: <a href="https://dev.twitter.com/docs/auth/oauth">https://dev.twitter.com/docs/auth/oauth</a>

For using Twitter OAuth you have to register a Application on Twitter (<a href="https://dev.twitter.com/apps/new">https://dev.twitter.com/apps/new</a>)

Once you done with the registration obtain the Consumer Key and Consumer Secret from the Twitter Application.

Be sure to put the callback URL in the application. Callback URL is the URL where user will land after successful authentication.

Showing an image here how to register an Application with Twitter.

<img class="aligncenter size-full wp-image-319" title="twitter_omnauth" src="http://arunagw.github.io/assets/images/twitter_omnauth.jpg" alt="" width="805" height="741" />

&nbsp;

Here showing some of the steps :

Generate a new Rails Application:
<pre>rails new TwitterAuth</pre>
Update your gemfile add <a href="https://rubygems.org/gems/omniauth-twitter">omniauth-twitter</a> gem into that
<pre>gem "omniauth-twitter"</pre>
Create a <code>config/initializers/omniauth.rb</code> file.
<strong>Paste your key instead of XXXX, and secret instead of YYYY</strong>
<pre>Rails.application.config.middleware.use OmniAuth::Builder do
  provider :twitter, 'XXXX', 'YYYY'
end</pre>
All Done!

Just start the server
<pre>bundle exec rails server</pre>
And hit the URL
<pre>http://localhost:3000/auth/twitter</pre>
And you should be landing on the Twitter Authorize page!

After success your app will redirect to your given callback URL with information and token!

At <a href="http://www.omniauth.org/">OmniAuth.org</a> you can try out different -2 Strategies.

&nbsp;

Useful links :
<ul>
	<li><a href="http://www.omniauth.org/">OmniAuth.org</a> One page for all you need.</li>
	<li><a href="https://rubygems.org/gems/omniauth-twitter">omniauth-twitter</a> gem.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Respond to Custom Formats in Rails]]></title>
    <link href="http://arunagw.github.io/2011/respond-custom-formats-rails/"/>
    <updated>2011-10-24T00:00:00+02:00</updated>
    <id>http://arunagw.github.io/2011/respond-custom-formats-rails</id>
    <content type="html"><![CDATA[We usually respond some of the known formats in Rails Application like HTML, XML, JavaScript, RSS and some custom.

Have you tried to use your own custom format for your Rails Application?

Yes you can use your custom format in Rails Application.

Here showing a simple Rails Application with responding custom formats.

Get a new app
<pre>rails new music_library </pre>

Get a scaffold into App

<pre>rails generate scaffold mp3 title:string url:string description:text </pre>

Ok so you are ready to serve some music on your app with some formats!

Now you have to register MIME types in the Rails Application.

For that open up <code>Rails.root/config/initializers/mime_types.rb</code>

<pre>
Mime::Type.register 'audio/mpeg' , :mp3
</pre>

<strong>Now you can serve <code>.mp3</code> and content</strong>

For that your respond block should look like
<pre>
def show
  @mp3 = Mp3.find(params[:id])
  respond_to do |format|
    format.mp3 { redirect_to @mp3.url }
  end
end
</pre>

Now if you call this action with <code>.mp3</code>
<pre>http://localhost:3000/mp3s/1.mp3</pre>

You will redirect_to <code>@mp3</code> url.
    
    Happy adding custom formats!!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X-Request-Id tracking and TaggedLogging in Rails3.2]]></title>
    <link href="http://arunagw.github.io/2011/x-request-id-tracking-taggedlogging-rails/"/>
    <updated>2011-10-21T00:00:00+02:00</updated>
    <id>http://arunagw.github.io/2011/x-request-id-tracking-taggedlogging-rails</id>
    <content type="html"><![CDATA[<strong>Rails 3.2 will come with X-Request-Id tracking and TaggedLogging support!! Recently <a href="http://twitter.com/dhh">DHH</a> added this feature <a href="https://github.com/rails/rails/commit/afde6fdd5ef3e6b0693a7e330777e85ef4cffddb">here</a>!</strong>

This makes it easy to trace requests from end-to-end in the stack and to identify individual requests in mixed logs.

If you have application on SAS model. Where you have logs filled with mixed request for all your customers. May be you need to filter out requests start with some specific subdomain. TaggedLogging will help you in that.

Where as the X-Request-Id feature will help you to track log with the same request. So in mixed logs you can easily find out the unique id logs for a request.

It will tag the log with the unique id for that request in the log. So later you can easily trace them down.

May be later on you can add more tags for your logs. If those methods are supported by the request object!

I am showing here some logs here with X-Request-Id
<pre>[2011-10-21 19:57:55] INFO  WEBrick 1.3.1
[2011-10-21 19:57:55] INFO  ruby 2.0.0 (2011-10-19) [x86_64-darwin11.2.0]
[2011-10-21 19:57:55] INFO  WEBrick::HTTPServer#start: pid=1585 port=3000
<strong><em>[9fda80066583f52e695a089d8622439c]</em> </strong>

Started GET "/blogs" for 127.0.0.1 at 2011-10-21 19:57:59 +0530
<strong><em>[9fda80066583f52e695a089d8622439c]</em> </strong> Processing by BlogsController#index as HTML
<strong><em>[9fda80066583f52e695a089d8622439c]</em> </strong>   Blog Load (0.2ms)  SELECT "blogs".* FROM "blogs"
<strong><em>[9fda80066583f52e695a089d8622439c]</em> </strong>   Rendered blogs/index.html.erb within layouts/application (8.8ms)
<strong><em>[9fda80066583f52e695a089d8622439c]</em> </strong> Completed 200 OK in 32ms (Views: 30.4ms | ActiveRecord: 0.3ms)
[2011-10-21 19:57:59] WARN  Could not determine content-length of response body. Set content-length of the response or set Response#chunked = true
[0962521e4215d645367b58fa41da9f0d] 

Started GET "/assets/application.css?body=1" for 127.0.0.1 at 2011-10-21 19:57:59 +0530
[0962521e4215d645367b58fa41da9f0d] Served asset /application.css - 304 Not Modified (0ms)
[2011-10-21 19:57:59] WARN  Could not determine content-length of response body. Set content-length of the response or set Response#chunked = true
[a7204cec4d2b2e930ac05b41fa1a5c65] 

Started GET "/assets/jquery_ujs.js?body=1" for 127.0.0.1 at 2011-10-21 19:57:59 +0530
[a7204cec4d2b2e930ac05b41fa1a5c65] Served asset /jquery_ujs.js - 304 Not Modified (1ms)
[2011-10-21 19:57:59] WARN  Could not determine content-length of response body. Set content-length of the response or set Response#chunked = true
[202eadd97820dfbf429f87f4725324c3] 

Started GET "/assets/blogs.css?body=1" for 127.0.0.1 at 2011-10-21 19:57:59 +0530
[202eadd97820dfbf429f87f4725324c3] Served asset /blogs.css - 304 Not Modified (2ms)
[2011-10-21 19:57:59] WARN  Could not determine content-length of response body. Set content-length of the response or set Response#chunked = true
[769a2752906bb0c2c5d1eae0a76ac328]</pre>
Here I showed some logs in strong. They are the same request for the index page tagged with the same unique id.
The same concept for the subdomain. The subdomain will also come as a tag.

<strong>You can also log some of the custom events in log file with the tags!</strong>
<pre>Logger.tagged("BCX") { Logger.info "Stuff" }                            # Logs "[BCX] Stuff"
Logger.tagged("BCX", "Jason") { Logger.info "Stuff" }                   # Logs "[BCX] [Jason] Stuff"
Logger.tagged("BCX") { Logger.tagged("Jason") { Logger.info "Stuff" } } # Logs "[BCX] [Jason] Stuff"</pre>
How to configure it ??

Open up your <code>production.rb </code> or your custom environment file, uncomment the line for <code>log_tags</code>
<pre>config.log_tags = [ :subdomain, :uuid ]</pre>
And you will get tagged logs with useful information.

Useful links :

Commit URL : <a href="https://github.com/rails/rails/commit/afde6fdd5ef3e6b0693a7e330777e85ef4cffddb">https://github.com/rails/rails/commit/afde6fdd5ef3e6b0693a7e330777e85ef4cffddb</a>
Feature Branch : 3.2

Cheers,
<a href="http://twitter.com/arunagw">@arunagw</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3.1 and JRuby]]></title>
    <link href="http://arunagw.github.io/2011/rails-3-1-jruby/"/>
    <updated>2011-10-10T00:00:00+02:00</updated>
    <id>http://arunagw.github.io/2011/rails-3-1-jruby</id>
    <content type="html"><![CDATA[Hi Folks,

If you are doing any application in which you required JRuby as a platform. You can use Rails3.1 with that. activerecord-jdbc-adapter 1.2.0 is ok with that!

All the steps are same as for the normal Rails Application

You can find more details here <a href="http://blog.jruby.org/2011/09/ar-jdbc-1-2-0-released/">http://blog.jruby.org/2011/09/ar-jdbc-1-2-0-released/</a>

&nbsp;

Cheers,
Arun
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Submit a patch for Rails on Github using "fork and edit button"]]></title>
    <link href="http://arunagw.github.io/2011/submit-patch-rails-github-fork-edit-button/"/>
    <updated>2011-09-11T00:00:00+02:00</updated>
    <id>http://arunagw.github.io/2011/submit-patch-rails-github-fork-edit-button</id>
    <content type="html"><![CDATA[Hi Folks,

I have recently written about my Rails Contributions experience <a title="Arun Agrawal Rails" href="http://agrawalarun.com/2011/08/03/working-as-a-rails-contributor/" target="_blank">here</a>.

I see that now days contribution is Rails is increased. People love to contribute in Open Source projects. And the way should be easy not painful.

I found that some people are struggling in submitting Pull Requests in Rails on Github. So i thought of writing the same to help them.

Some people are new to git and they don&#8217;t know much about git&#8230; or sometime patch is very small and they want to use Github&#8217;s &#8220;fork and edit this file&#8221; feature to submit a patch.

And some people who are good in Rails will do it in more easy manner. And easy to open multiple pull request at a time from the same branch.

I am writing some steps to use Github&#8217;s fork and edit feature to open pull request.
<p style="text-align: center;"><strong>Open up your project on Github open up file where you want to change</strong></p>
<p style="text-align: center;"><a href="http://arunagw.github.io/assets/images/fork_and_edit.jpg"><img class="aligncenter size-full wp-image-239" title="fork_and_edit" src="http://arunagw.github.io/assets/images/fork_and_edit.jpg" alt="" width="975" height="270" /></a></p>
<p style="text-align: center;"><strong>Change your desired things into the file. You can only change one file in one commit</strong></p>
<p style="text-align: center;"><a href="http://arunagw.github.io/assets/images/make_changes.jpg"><img class="aligncenter size-full wp-image-240" title="make_changes" src="http://arunagw.github.io/assets/images/make_changes.jpg" alt="" width="972" height="781" /></a></p>
<p style="text-align: center;"><strong>Propese your file changes! Here you can write about your changes. Give some references about issue. Can see the file changed. Can see the commits which you have made.</strong></p>
<p style="text-align: center;"><a href="http://arunagw.github.io/assets/images/pr_discussion.jpg"><img class="aligncenter size-full wp-image-243" title="pr_discussion" src="http://arunagw.github.io/assets/images/pr_discussion.jpg" alt="" width="953" height="533" /></a></p>
<p style="text-align: center;"><strong>Change commit is the most important part. The reason is when people are doing changes in specific branch. Let&#8217;s take a example of Rails. If you are going to submit a patch against Rails 3.0.X version then you must have to choose 3-0-stable branch instead of master in Base branch.</strong></p>
<p style="text-align: center;"><strong>After updating the commit range you can submit the Pull Request and also must see the File Changed.</strong></p>
<p style="text-align: left;"><a href="http://arunagw.github.io/assets/images/pr_change_commits.jpg"><img class="aligncenter size-full wp-image-241" title="pr_change_commits" src="http://arunagw.github.io/assets/images/pr_change_commits.jpg" alt="" width="956" height="397" /></a><strong></strong></p>
<p style="text-align: left;"><em><strong>Use this feature when you are fixing any typos, updating any docs. For submitting any code changes you should be running tests. :-) </strong></em></p>
<p style="text-align: left;"><strong>Feel free to ask me if you face any problem in doing these things. We want more contributions!</strong></p>
<p style="text-align: left;"><strong>You can tweet me <a title="Arun Agrawal Twitter" href="http://twitter.com/arunagw" target="_blank">@arunagw</a> or catch me on my email any time.</strong></p>
<p style="text-align: left;"><strong>Cheers!</strong></p>
<p style="text-align: center;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serialized Attributes Rails 3]]></title>
    <link href="http://arunagw.github.io/2011/serialized-attributes-rails-3/"/>
    <updated>2011-08-27T00:00:00+02:00</updated>
    <id>http://arunagw.github.io/2011/serialized-attributes-rails-3</id>
    <content type="html"><![CDATA[This post will guide you how to do Serialization for your attributes in Rails.

Serialize means you want to save arbitrary Ruby data structure into the database.

Let consider we have a User model in which we want to store preferences for user in a Ruby data structure format. Previously it was only YAML.

<pre>
class User < ActiveRecord::Base
  serialize :preferences 
end
</pre>

<pre>
user = User.find 1
user.preferences = {:foo =>  'bar'}
user.save
</pre>

So now we can pass a second parameter to serialize method to use that serialization method.

<pre>
class User < ActiveRecord::Base
  serialize :preferences, SomeCoolEncoder.new
end
</pre>

You need to implement this encoder! It can be a JSON, XML, Base64. Or what every encoding technique you like to use.

A sample encoder look like this.

<pre>
class Base64Encoder
  def load(value)
    return unless value
    value.unpack('m').last
  end

  def dump(text)
    [text].pack('m')
  end
end
</pre>

This new encoder must have these methods in it!

So now you attribute is serialized and you can store data in it in your given format.

Ok so now we talk about ActiveModel::Serialization

ActiveModel::Serialization will give you serialized attribute for your classes.

A very simple example to use ActiveModel::Serialization
<pre>
class Post

  include ActiveModel::Serialization

  attr_accessor :title

  def attributes
    {'title' => title}
  end

end

# So you can use like 

post = Post.new
post.serializable_hash   # => {"title"=>nil}
post.name = "Rails is Cool!!"
post.serializable_hash   # => {"name"=>"Rails is Cool!!"}

</pre>

Can use two inbuilt Serialization techniques 

<pre>
include ActiveModel::Serializers::JSON
include ActiveModel::Serializers::Xml
</pre>

This is a very short intro for Serialization. Hope i will write more in detail soon!!

I got this from <a href="http://github.com/tenderlove" target="_blank">@tenderlove</a> talk in <a href="http://www.youtube.com/watch?v=kWOAHIpmLAI" target="_blank">RailsConf2011</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3.0.10 and JRuby]]></title>
    <link href="http://arunagw.github.io/2011/rails-3-0-10-jruby/"/>
    <updated>2011-08-05T00:00:00+02:00</updated>
    <id>http://arunagw.github.io/2011/rails-3-0-10-jruby</id>
    <content type="html"><![CDATA[Finally, The Rails is coming with template support with JRuby platform. We used to use "-m" option to generate new Rails Application for JRuby platform. Which is no more need now.

Just set your platform to JRuby and create a new Rails Application as you do normally and it will generate a Application which is ready to go. No more tweaks required..!!

This <a href="https://github.com/rails/rails/pull/1649" target="_blank">pull request</a> which get merged into Rails 3-0-stable branch and it&#8217;s shipped with Rails 3.0.10.rc1 and will come with Rails 3.0.10.

This feature is also coming with Rails 3.1.

Showing here some of the example which will create Rails Application for JRuby platform. I have tested this on JRuby 1.6.3 version.
<pre>rvm jruby-1.6.3
# Will set your environment for JRuby 1.6.3 version.</pre>
Time to create rails app. This will generate a rails app for JRuby platform. Things like database.yml, Gemfile will generated specifically for JRuby platform.
<pre>rails new myapp</pre>
database.yml
<pre># SQLite version 3.x
#   gem 'activerecord-jdbcsqlite3-adapter'

development:
  adapter: sqlite3
  database: db/development.sqlite3

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  adapter: sqlite3
  database: db/test.sqlite3

production:
  adapter: sqlite3
  database: db/production.sqlite3</pre>
Gemfile
<pre>source 'http://rubygems.org'

gem 'rails', '3.0.10.rc1'

gem 'jruby-openssl'
# Bundle edge Rails instead:
# gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'

gem 'activerecord-jdbcsqlite3-adapter'

# Use unicorn as the web server
# gem 'unicorn'

# Deploy with Capistrano
# gem 'capistrano'

# To use debugger (ruby-debug for Ruby 1.8.7+, ruby-debug19 for Ruby 1.9.2+)
# gem 'ruby-debug'
# gem 'ruby-debug19', :require =&gt; 'ruby-debug'

# Bundle the extra gems:
# gem 'bj'
# gem 'nokogiri'
# gem 'sqlite3-ruby', :require =&gt; 'sqlite3'
# gem 'aws-s3', :require =&gt; 'aws/s3'

# Bundle gems for the local environment. Make sure to
# put test-only gems in this group so their generators
# and rake tasks are available in development mode:
# group :development, :test do
#   gem 'webrat'
# end</pre>
<strong>You can see in Gemfile the changes. It requires <code> gem 'jruby-openssl' </code> gem and <code>gem 'activerecord-jdbcsqlite3-adapter' </code> gem</strong>. Which is required for JRuby platform.

Same work to generate for mysql and postgres.
<pre>rails new myapp -d mysql</pre>
And that&#8217;s all.!!

Your Application is ready to run. Just do <code>bundle install</code> and all set. wOOtt..!!

Post comments and discuss things if you guys still facing any issue. You can also post issue on <a href="http://github.com/rails/rails/issues" target="_blank">Rails Issues</a> and ask me to look into that.

Some Useful links related to post:
<ol>
	<li><a href="http://github.com/nicksieger/activerecord-jdbc-adapter" target="_blank">Activerecord-jdbc-adapter</a></li>
	<li><a href="http://www.jruby.org/" target="_blank">Jruby.org</a></li>
</ol>
<div>Cheers,</div>
<div><a href="http://twitter.com/arunagw" target="_blank">@arunagw</a></div>
<br />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working as a Rails Contributor]]></title>
    <link href="http://arunagw.github.io/2011/working-as-a-rails-contributor/"/>
    <updated>2011-08-03T00:00:00+02:00</updated>
    <id>http://arunagw.github.io/2011/working-as-a-rails-contributor</id>
    <content type="html"><![CDATA[<div class="entry">

  <p>Finally, I got the time to write something about my
    <a href="http://contributors.rubyonrails.org/contributors/arun-agrawal/commits" target="_blank">Rails
      Contributions</a>. I have started contributing in April 2011. In start i usually do some test cases fixes and some
    updates.</p>

  <p>After sometime i found that if you are using JRuby as a platform then you need to customize your template after
    generation. Or you need to use some custom template with -m option to customize your application.</p>

  <p>I started digging into the Rails code base and i found that it can be added easily. Then… I just added and my
    <a href="https://github.com/rails/rails/pull/300" target="_blank">pull request</a> got accepted. wOOOttt!!</p>

  <p>But that for master that means the feature will come in Rails 3.1 so after that i done some commits into 3-0-stable
    branch and yeah.. that feature is coming in Rails 3.0.10.</p>

  <p>It’s really great to talking those guys on github. Specially when they ask you to change something which you have
    written wrong.</p>

  <p>After that i started contributing in Rails more and more. It helps me to understand internal code and the basics of
    Ruby.</p>

  <p>In recent we organized two bugmashs and we were the part of global
    <a href="http://weblog.rubyonrails.org/2011/7/14/rails-3-1-hackfest" target="_blank">Rails Hackfest</a>. It was
    really very good. Enjoyed. Learnt a lot.</p>

  <p>I am a part of <a href="http://bangaloreruby.org" target="_blank">BangaloreRubyUserGroup</a>&nbsp;which helps a
    lot.</p>

  <p>&nbsp;</p>

  <p>Cheers,</p>

  <p>Arun</p>

  <p><a href="http://twitter.com/arunagw">@arunagw</a></p>


</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Mongoid Team]]></title>
    <link href="http://arunagw.github.io/2011/working-with-mongoid-team/"/>
    <updated>2011-07-03T00:00:00+02:00</updated>
    <id>http://arunagw.github.io/2011/working-with-mongoid-team</id>
    <content type="html"><![CDATA[<div class="entry">

  <p>It’s long time i am writing again Blog. I am very happy that i have started working with Mongoid dev team.</p>

  <p><a href="http://mongoid.org" target="_blank">Mongoid</a> is a gem written in Ruby for
    <a href="http://www.mongodb.org/" target="_blank">MongoDB</a> use.</p>

  <p><a href="http://www.mongodb.org/" target="_blank">MongoDB</a> is a NoSQL database.</p>

  <p>It’s great to work with open source project as a core member.</p>

  <p>Mongoid
    Organization&nbsp;<a title="Mongoid" href="http://github.com/mongoid" target="_blank">https://github.com/mongoid</a>
  </p>

  <p>Mongoid Gem :
    <a title="Mongoid Gem" href="https://github.com/mongoid/mongoid" target="_blank">https://github.com/mongoid/mongoid</a>
  </p>

  <p>Mongoid Doc : <a title="Mongoid" href="http://mongoid.org" target="_blank">http://mongoid.org</a></p>


</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails3 application with Jruby]]></title>
    <link href="http://arunagw.github.io/2011/rails3-application-jruby/"/>
    <updated>2011-03-28T00:00:00+02:00</updated>
    <id>http://arunagw.github.io/2011/rails3-application-jruby</id>
    <content type="html"><![CDATA[<strong>If you are living on edge and you are using Rails3 then you need follow this.<a href="http://arunagw.github.io/2011/rails-3-0-10-jruby/"> Rails3 With JRuby</a></strong>

&nbsp;

Hi All,

Recently i have started a Rails3 application which will use Jruby.

I have gone through some of the steps for that application up and running.

If you are using <a href="http://rvm.beginrescueend.com/">RVM</a> then it&#8217;s easy to install Jruby. In the latest <a href="http://rvm.beginrescueend.com/">RVM</a> version Jruby-1.6.0 is the default one. So my recommendation is first update the RVM itself then install Jruby.

To update RVM and get the Jruby-1.6.0 installed
<pre>rvm update 
# But if you are already on the latest RVM then you will get message the "rvm update has been removed".

#To install Jruby

rvm install jruby</pre>
After installing Jruby you need to switch your environment to Jruby
<pre> 
rvm use jruby
#Using /Users/arunagw/.rvm/gems/jruby-1.6.0</pre>
Can check by using
<pre>~~&gt;jruby -v                                                                                                                                                                          
jruby 1.6.0 (ruby 1.8.7 patchlevel 330) (2011-03-15 f3b6154) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_22) [darwin-x86_64-java]
~~&gt;ruby -v                                                                                                                                                                           
jruby 1.6.0 (ruby 1.8.7 patchlevel 330) (2011-03-15 f3b6154) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_22) [darwin-x86_64-java]</pre>
Now you are ready to play with Jruby stuff.

You can do some basic stuff like irb to test things
<pre>irb
#IRB will also work
jirb
# JIRB will also work</pre>
Time to install Rails in Jruby environment
<pre>gem install rails 

#Will also work

jruby -S gem install rails</pre>
All set. Create your Rails application.
<pre>rails new my_app</pre>
Above command will create a rails application but not useful for Jruby platform.

For all setting just run
<pre>rails new my_app -m http://jruby.org/rails3.rb</pre>
This will do all setup for you for a rails3 app in Jruby.

You may need to change/update your Gemfile for your gems.

Problems i faced.

<code> rake db:create</code> will give you an error if you are using Mysql with Jruby.
<pre>uninitialized constant Mysql::Error</pre>
Here is the <a href="https://rails.lighthouseapp.com/projects/8994/tickets/6628-uninitialized-constant-mysqlerror">ticket</a> information about this.

Solution for this problem right now is to create database manually.

After that all will work. No more hurdles i found.

If you got in any problem let me know. We will try to solve that together.

Links may be useful to find stuff

1. <a href="http://jruby-extras.rubyforge.org/activerecord-jdbc-adapter/">Jruby Activerecord adaptor</a>.
2. <a href="https://github.com/arunagw/my_jruby_sampleapp">My Sample Application</a>
3. <a href="http://rvm.beginrescueend.com/">RVM</a>

&#8212;&#8211;

Arun
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use selenium as a script]]></title>
    <link href="http://arunagw.github.io/2011/selenium-script/"/>
    <updated>2011-03-22T00:00:00+01:00</updated>
    <id>http://arunagw.github.io/2011/selenium-script</id>
    <content type="html"><![CDATA[Hey All,

I came with a situation where i need to test things from browser. It nothing to do with the different browsers. It just to check some validations, some messages with some existing data with me.

I can't touch the code base. It's something like QA work.

I am not very much aware about using of selenium IDE which is available in browsers.

I look into the selenium world with ruby and found some interesting stuff that i can script my test and run for a browser.

To run into the browser i need to setup selenium-rc server running.

I have done it in my way. Just small code and using selenium-client gem which allows me to start and stop the selenium-rc server.

Here is my code for selenium-rc server. It also includes the selenium-jar file.
<a href="https://github.com/arunagw/selenium-server">https://github.com/arunagw/selenium-server</a>

For running selenium-rc server. Just clone it. bundle install and then rake selenium:rc:start

All set. Now you are ready to run selenium script from your local machine.

To test things i am using hitting up google.com and validating stuff. A google example is also given on the selenium-client gems readme.

<pre>
#!/usr/bin/env ruby
#
# Sample Ruby script using the Selenium client API
#
require "rubygems"
gem "selenium-client", ">=1.2.16"
require "selenium/client"

begin
  @browser = Selenium::Client::Driver.new \
      :host => "localhost", 
      :port => 4444, 
      :browser => "*firefox", 
      :url => "http://www.google.com", 
      :timeout_in_second => 60

  @browser.start_new_browser_session
    @browser.open "/"
    @browser.type "q", "Selenium seleniumhq.org"
    @browser.click "btnG", :wait_for => :page
    puts @browser.text?("seleniumhq.org")
ensure
  @browser.close_current_browser_session    
end
</pre>

You can just run above script after start the selenium-rc server and see the result yourself in the browser. 

Some useful links for get up and running selenium with ruby.

Selenium-client for ruby :- <a href="https://github.com/ph7/selenium-client">https://github.com/ph7/selenium-client</a> 
All about selenium with ruby :- <a href="http://seleniumhq.org/projects/ruby/">http://seleniumhq.org/projects/ruby/</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem 1.5 with Rails 2.3]]></title>
    <link href="http://arunagw.github.io/2011/gem-1-5-rails-2-3/"/>
    <updated>2011-03-19T00:00:00+01:00</updated>
    <id>http://arunagw.github.io/2011/gem-1-5-rails-2-3</id>
    <content type="html"><![CDATA[You may fall down into the situation where you don't have RVM and your system gem is upgraded for using latest things.

And your old application is still running on older version of rails.

This is just a workaround of using <code>Gem > 1.3.7</code> in Rails 2.3 Applications.

I have tested this solution with Rails 2.3.5 and different version of gems.

After upgrading gems to 1.6.2 i have got an error 
<pre>
/activesupport-2.3.5/lib/active_support/dependencies.rb:55: 
uninitialized constant ActiveSupport::Dependencies::Mutex (NameError)
</pre>

To fix this error need to update </code>boot.rb</code> file. Place this at the top of <code>boot.rb</code>

<pre>require 'thread'</pre>

After adding this you should be getting this error 
<pre> 
/gem_dependency.rb:119:in
 `requirement': undefined local variable or method `version_requirements'
</pre>

To fix this error you need update your <code>environment.rb</code> file.
Add this code above your <code>Rails::Initializer.run</code> block.

<pre>
if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.3.7')
 module Rails
   class GemDependency
     def requirement
       r = super
       (r == Gem::Requirement.default) ? nil : r
     end
   end
 end
end
</pre>

Now your application should start running properly. Have fun ;)

Now you can downgrade or upgrade your system gem version. Your application will still run. 

Above workaround works for me very well. Any other ideas? 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis key-value store]]></title>
    <link href="http://arunagw.github.io/2011/redis-key-value-store/"/>
    <updated>2011-03-18T00:00:00+01:00</updated>
    <id>http://arunagw.github.io/2011/redis-key-value-store</id>
    <content type="html"><![CDATA[<a href="http://redis.io/">Redis</a> is really cool and lightweight key-value store. If you are looking for something in which you can store some string, hashes, lists, sets. The <a href="http://redis.io/">Redis</a> is the best.

If you are a Ruby developer then you must try out this with a <a href="https://github.com/ezmobius/redis-rb">redis-rb</a> gem. Very easy to configure, very easy to store things.

Following is the way of using redis in Ruby way.

To install
<pre>gem install redis</pre>
To load
<pre>require 'redis'</pre>
Before performing any operation with redis server you need to install <a href="http://redis.io/download">Redis</a> and start the redis server.

After that you can do like
<pre>redis = Redis.new # Automatically connect with the default port.

# if you have changed the port then you can specify the port in initialize.

&gt;&gt; redis.set "foo", "bar"
=&gt; "OK"

&gt;&gt; redis.get "foo"
=&gt; "bar"</pre>
Storing objects
<pre>&gt;&gt; redis.set "foo", [1, 2, 3].to_json
=&gt; OK

&gt;&gt; JSON.parse(redis.get("foo"))
=&gt; [1, 2, 3]</pre>
There are lot&#8217;s more things you can do with the Redis.

Links help you in redis

<a href="http://redis.io">Redis official documentation</a> (<a href="http://redis.io">http://redis.io</a>)
<a href="https://github.com/antirez/redis">Github redis repository </a>(<a href="https://github.com/antirez/redis">https://github.com/antirez/redis</a>)
<a href="https://github.com/ezmobius/redis-rb">Github redis rubygem repository </a>(<a href="https://github.com/ezmobius/redis-rb">https://github.com/ezmobius/redis-rb</a>)
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundler Usage -- Installing Gems]]></title>
    <link href="http://arunagw.github.io/2011/bundler-usage-installing-gems/"/>
    <updated>2011-03-18T00:00:00+01:00</updated>
    <id>http://arunagw.github.io/2011/bundler-usage-installing-gems</id>
    <content type="html"><![CDATA[Every time you change your Gemfile then you might adding/removing any dependancies in your application.

Just <code> bundle install </code> will install gems for you. 

The output may look like 

<pre>
$ bundle install 
Fetching git://github.com/rails/rails.git
Fetching source index for http://rubygems.org/ 
Using rake (0.8.7) 
Installing abstract (1.0.0)
Your bundle is complete! Use `bundle show [gemname]` to see where a
bundled gem is installed.
</pre>

You can specify groups for special environments 

<pre> 
$ bundle install --without development test
</pre>
<pre>
$ bundle install --without test
</pre>

You can specify installation directory for your gems. 
This will install all the gems into tmp/bundle folder
<pre>
$ bundle install --path tmp/bundle
</pre>

You can check your applications bundler config. 

<pre> 
$ bundle config 

Settings are listed in order of priority. The top value will be used.

disable_shared_gems
  Set for your local app (/Users/arunagw/foobar/.bundle/config): "1"

path
  Set for your local app (/Users/arunagw/foobar/.bundle/config): "tmp/bundle"
</pre>

For more details about bundler you can checkout <a href="http://gembundler.com/">http://gembundler.com/</a>
And also <a href="http://railscasts.com/episodes/201-bundler"> http://railscasts.com/episodes/201-bundler</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundler Usage -- Manage Gemfile]]></title>
    <link href="http://arunagw.github.io/2011/bundler-usage-manage-gemfile/"/>
    <updated>2011-03-17T00:00:00+01:00</updated>
    <id>http://arunagw.github.io/2011/bundler-usage-manage-gemfile</id>
    <content type="html"><![CDATA[In the previous post we posted about basic <a href="http://gembundler.com/">Bundler</a> usage. Here i am posting about some advance way of managing Gemfile.

<a href="http://gembundler.com/">Bundler</a> requires a Gemfile. If you are creating a Rails application which is above to version 3, the Gemfile automatic gets created.

Gemfile contains all your dependent gems.
<pre>gem "rails", "~&gt; 3.0.5"

gem "mysql2"</pre>
The above Gemfile explains that we need Rails 3.0.5 and Mysql2 gems for our application.

Gemfile can be manage in different ways.

We can group things together which is only used in specific environment.
<pre>group :test do 
  gem "faker
end
group :development, :test do
  gem 'ruby-debug'
end</pre>
We can specify the gem version as a second argument in gem. If there is no version then it will fetch the latest one.

Some time gem name is different and the library needs to be loaded may be different. Then we need to specify specifically the lib name.
<pre>gem 'sqlite3-ruby', :require =&gt; 'sqlite3'</pre>
Loading gem from a git repository directly

If our library or gem is hosted somewhere else then we can add more source at the top of Gemfile. But if we want to fetch Gem from a git repository then we need to something like below. But that library must contain a .gemspec file to consider as a Gem.
<pre>gem 'nokogiri', :git =&gt; 'git://github.com/tenderlove/nokogiri.git'</pre>
We can also specify a branch/tag/ref of git repository.
<pre>gem 'nokogiri', :git =&gt; 'git://github.com/tenderlove/nokogiri.git',
                                   :branch =&gt; 'stable-2'</pre>
<pre>gem 'nokogiri', :git =&gt; 'git://github.com/tenderlove/nokogiri.git', 
                                   :tag =&gt; 'tag-2'</pre>
<pre>gem 'nokogiri', :git =&gt; 'git://github.com/tenderlove/nokogiri.git', 
                                   :ref =&gt; '23456'</pre>
We can load gems from our local path also.
<pre>gem 'nokogiri', :path =&gt; '~/code/nokogiri'</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query cache in Rails]]></title>
    <link href="http://arunagw.github.io/2011/query-cache-rails/"/>
    <updated>2011-02-27T00:00:00+01:00</updated>
    <id>http://arunagw.github.io/2011/query-cache-rails</id>
    <content type="html"><![CDATA[By default Rails do Query cache. Whenever it execute <code>find</code> it enables the query cache.
You can enable manually by wrapping up in <code>cache</code> block.
<pre>Post.cache do
  puts Post.first
  puts Post.first
  puts Post.first
end
</pre>

Your development.log looks like:
<pre>
Post Load (1.0ms) SELECT * FROM posts LIMIT 1
CACHE (0.0ms) SELECT * FROM posts LIMIT 1
CACHE (0.0ms) SELECT * FROM posts LIMIT 1
</pre>
]]></content>
  </entry>
  
</feed>
